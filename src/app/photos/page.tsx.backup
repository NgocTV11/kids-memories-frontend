'use client';

import { useState, useEffect } from 'react';
import { ProtectedRoute } from '@/components/ProtectedRoute';
import { photosService, Photo } from '@/services/photos.service';
import { albumsService, Album } from '@/services/albums.service';
import { kidsService, Kid } from '@/services/kids.service';
import {
  Container,
  Box,
  Typography,
  Button,
  Grid,
  CircularProgress,
  Alert,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Fab,
} from '@mui/material';
import {
  Add,
  Photo as PhotoIcon,
  Upload,
} from '@mui/icons-material';
import { PhotoUpload } from '@/components/photos/PhotoUpload';
import { PhotoGallery } from '@/components/photos/PhotoGallery';
import { PhotoDetail } from '@/components/photos/PhotoDetail';

export default function PhotosPage() {
  const [photos, setPhotos] = useState<Photo[]>([]);
  const [albums, setAlbums] = useState<Album[]>([]);
  const [kids, setKids] = useState<Kid[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [openUpload, setOpenUpload] = useState(false);
  const [selectedPhoto, setSelectedPhoto] = useState<Photo | null>(null);
  const [selectedAlbumId, setSelectedAlbumId] = useState<string>('all');
  const [selectedKidId, setSelectedKidId] = useState<string>('all');
  const [total, setTotal] = useState(0);
  const [page, setPage] = useState(0);
  const [limit] = useState(20);

  useEffect(() => {
    loadData();
  }, [selectedAlbumId, selectedKidId, page]);

  const loadData = async () => {
    try {
      setLoading(true);
      setError(null);

      const [photosData, albumsData, kidsData] = await Promise.all([
        photosService.getAll(
          selectedAlbumId === 'all' ? undefined : selectedAlbumId,
          selectedKidId === 'all' ? undefined : selectedKidId,
          limit,
          page * limit
        ),
        albumsService.getAll(),
        kidsService.getAll(),
      ]);

      setPhotos(photosData.data);
      setTotal(photosData.total);
      setAlbums(albumsData);
      setKids(kidsData);
    } catch (err: any) {
      console.error('Error loading data:', err);
      setError(err.response?.data?.message || 'Failed to load photos');
    } finally {
      setLoading(false);
    }
  };

  const handleUploadSuccess = () => {
    setOpenUpload(false);
    setPage(0); // Reset to first page
    loadData();
  };

  const handlePhotoClick = (photo: Photo) => {
    setSelectedPhoto(photo);
  };

  const handlePhotoDetailClose = () => {
    setSelectedPhoto(null);
    loadData(); // Reload to get updated like counts
  };

  const handleDeletePhoto = async (photoId: string) => {
    if (!confirm('Bạn có chắc muốn xóa ảnh này?')) return;

    try {
      await photosService.delete(photoId);
      setPhotos(photos.filter((p) => p.id !== photoId));
      setSelectedPhoto(null);
    } catch (err: any) {
      console.error('Error deleting photo:', err);
      alert(err.response?.data?.message || 'Failed to delete photo');
    }
  };

  const handleLoadMore = () => {
    setPage(page + 1);
  };

  return (
    <ProtectedRoute>
      <Container maxWidth="lg" sx={{ py: 4 }}>
        {/* Header */}
        <Box sx={{ mb: 4 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Box>
              <Typography variant="h4" fontWeight="bold" gutterBottom>
                <PhotoIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                Quản lý ảnh
              </Typography>
              <Typography variant="body1" color="text.secondary">
                {total} ảnh • Tải lên và quản lý ảnh của bé
              </Typography>
            </Box>
            <Button
              variant="contained"
              size="large"
              startIcon={<Upload />}
              onClick={() => setOpenUpload(true)}
            >
              Tải ảnh lên
            </Button>
          </Box>

          {/* Filters */}
          <Grid container spacing={2}>
            <Grid size={{ xs: 12, sm: 6, md: 4 }}>
              <FormControl fullWidth>
                <InputLabel>Lọc theo album</InputLabel>
                <Select
                  value={selectedAlbumId}
                  label="Lọc theo album"
                  onChange={(e) => {
                    setSelectedAlbumId(e.target.value);
                    setPage(0);
                  }}
                >
                  <MenuItem value="all">Tất cả albums</MenuItem>
                  {albums.map((album) => (
                    <MenuItem key={album.id} value={album.id}>
                      {album.title}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid size={{ xs: 12, sm: 6, md: 4 }}>
              <FormControl fullWidth>
                <InputLabel>Lọc theo bé</InputLabel>
                <Select
                  value={selectedKidId}
                  label="Lọc theo bé"
                  onChange={(e) => {
                    setSelectedKidId(e.target.value);
                    setPage(0);
                  }}
                >
                  <MenuItem value="all">Tất cả</MenuItem>
                  {kids.map((kid) => (
                    <MenuItem key={kid.id} value={kid.id}>
                      {kid.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
          </Grid>
        </Box>

        {/* Error Display */}
        {error && (
          <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError(null)}>
            {error}
          </Alert>
        )}

        {/* Loading State */}
        {loading && page === 0 ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', py: 8 }}>
            <CircularProgress />
          </Box>
        ) : photos.length === 0 ? (
          /* Empty State */
          <Box sx={{ textAlign: 'center', py: 8 }}>
            <PhotoIcon sx={{ fontSize: 80, color: 'text.disabled', mb: 2 }} />
            <Typography variant="h6" color="text.secondary" gutterBottom>
              Chưa có ảnh nào
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
              Tải lên ảnh đầu tiên để bắt đầu
            </Typography>
            <Button
              variant="contained"
              startIcon={<Upload />}
              onClick={() => setOpenUpload(true)}
            >
              Tải ảnh lên
            </Button>
          </Box>
        ) : (
          <>
            {/* Photos Grid */}
            <PhotoGallery photos={photos} onPhotoClick={handlePhotoClick} />

            {/* Load More */}
            {photos.length < total && (
              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
                <Button
                  variant="outlined"
                  onClick={handleLoadMore}
                  disabled={loading}
                >
                  {loading ? 'Đang tải...' : 'Xem thêm'}
                </Button>
              </Box>
            )}
          </>
        )}

        {/* Floating Action Button for Upload */}
        <Fab
          color="primary"
          sx={{ position: 'fixed', bottom: 24, right: 24 }}
          onClick={() => setOpenUpload(true)}
        >
          <Add />
        </Fab>

        {/* Upload Modal */}
        <PhotoUpload
          open={openUpload}
          albums={albums}
          kids={kids}
          onClose={() => setOpenUpload(false)}
          onSuccess={handleUploadSuccess}
        />

        {/* Photo Detail Modal */}
        {selectedPhoto && (
          <PhotoDetail
            photo={selectedPhoto}
            onClose={handlePhotoDetailClose}
            onDelete={handleDeletePhoto}
          />
        )}
      </Container>
    </ProtectedRoute>
  );
}
