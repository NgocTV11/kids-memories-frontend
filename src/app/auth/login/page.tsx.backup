'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useAuthStore } from '@/store/auth.store';
import {
  Box,
  Container,
  Paper,
  TextField,
  Button,
  Typography,
  Link,
  Alert,
  InputAdornment,
  IconButton,
  CircularProgress,
  Grid,
  Divider,
  Card,
  CardContent,
} from '@mui/material';
import {
  Visibility,
  VisibilityOff,
  Login as LoginIcon,
  PhotoLibrary,
  Timeline,
  Celebration,
  ChildCare,
  FavoriteRounded,
} from '@mui/icons-material';
import NextLink from 'next/link';

export default function LoginPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { login, isLoading, error, clearError, isAuthenticated } = useAuthStore();

  const [formData, setFormData] = useState({
    email: '',
    password: '',
  });
  const [showPassword, setShowPassword] = useState(false);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});

  // Redirect if already authenticated
  useEffect(() => {
    if (isAuthenticated) {
      const redirect = searchParams.get('redirect') || '/dashboard';
      router.push(redirect);
    }
  }, [isAuthenticated, router, searchParams]);

  // Clear errors when component unmounts
  useEffect(() => {
    return () => {
      clearError();
    };
  }, [clearError]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
    
    // Clear validation error for this field
    if (validationErrors[name]) {
      setValidationErrors((prev) => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };

  const validateForm = (): boolean => {
    const errors: Record<string, string> = {};

    if (!formData.email) {
      errors.email = 'Email is required';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = 'Invalid email format';
    }

    if (!formData.password) {
      errors.password = 'Password is required';
    } else if (formData.password.length < 6) {
      errors.password = 'Password must be at least 6 characters';
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    try {
      await login(formData);
      
      // Redirect after successful login
      const redirect = searchParams.get('redirect') || '/dashboard';
      router.push(redirect);
    } catch (error) {
      // Error is handled by store
      console.error('Login error:', error);
    }
  };

  return (
    <Box
      sx={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        position: 'relative',
        overflow: 'hidden',
        '&::before': {
          content: '""',
          position: 'absolute',
          top: '-50%',
          right: '-50%',
          width: '100%',
          height: '100%',
          background: 'radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%)',
          animation: 'float 20s ease-in-out infinite',
        },
        '@keyframes float': {
          '0%, 100%': { transform: 'translate(0, 0)' },
          '50%': { transform: 'translate(-30px, -30px)' },
        },
      }}
    >
      <Container maxWidth="lg">
        <Grid container sx={{ minHeight: '100vh' }}>
          {/* Left Side - Hero Section */}
          <Grid
            size={{ xs: 0, md: 6 }}
            sx={{
              display: { xs: 'none', md: 'flex' },
              flexDirection: 'column',
              justifyContent: 'center',
              alignItems: 'center',
              p: 4,
              color: 'white',
              position: 'relative',
              zIndex: 1,
            }}
          >
            <Box sx={{ textAlign: 'center', mb: 6 }}>
              <Box
                sx={{
                  mb: 3,
                  animation: 'bounce 2s ease-in-out infinite',
                  '@keyframes bounce': {
                    '0%, 100%': { transform: 'translateY(0)' },
                    '50%': { transform: 'translateY(-20px)' },
                  },
                }}
              >
                <ChildCare sx={{ fontSize: 120, filter: 'drop-shadow(0 10px 20px rgba(0,0,0,0.3))' }} />
              </Box>
              <Typography variant="h2" fontWeight="bold" gutterBottom sx={{ textShadow: '0 4px 12px rgba(0,0,0,0.3)' }}>
                Kids Memories
              </Typography>
              <Typography variant="h5" sx={{ opacity: 0.95, mb: 4, textShadow: '0 2px 8px rgba(0,0,0,0.2)' }}>
                Lưu giữ những khoảnh khắc quý giá của bé yêu
              </Typography>
            </Box>

            {/* Feature Cards */}
            <Grid container spacing={2} sx={{ maxWidth: 500 }}>
              <Grid size={{ xs: 6 }}>
                <Card
                  sx={{
                    bgcolor: 'rgba(255,255,255,0.15)',
                    backdropFilter: 'blur(10px)',
                    border: '1px solid rgba(255,255,255,0.2)',
                    transition: 'transform 0.3s ease',
                    '&:hover': { transform: 'translateY(-5px)' },
                  }}
                >
                  <CardContent sx={{ textAlign: 'center', color: 'white' }}>
                    <PhotoLibrary sx={{ fontSize: 40, mb: 1 }} />
                    <Typography variant="body2" fontWeight="medium">
                      Albums
                    </Typography>
                    <Typography variant="caption" sx={{ opacity: 0.9 }}>
                      Tổ chức ảnh đẹp
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid size={{ xs: 6 }}>
                <Card
                  sx={{
                    bgcolor: 'rgba(255,255,255,0.15)',
                    backdropFilter: 'blur(10px)',
                    border: '1px solid rgba(255,255,255,0.2)',
                    transition: 'transform 0.3s ease',
                    '&:hover': { transform: 'translateY(-5px)' },
                  }}
                >
                  <CardContent sx={{ textAlign: 'center', color: 'white' }}>
                    <Timeline sx={{ fontSize: 40, mb: 1 }} />
                    <Typography variant="body2" fontWeight="medium">
                      Timeline
                    </Typography>
                    <Typography variant="caption" sx={{ opacity: 0.9 }}>
                      Dòng thời gian
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid size={{ xs: 6 }}>
                <Card
                  sx={{
                    bgcolor: 'rgba(255,255,255,0.15)',
                    backdropFilter: 'blur(10px)',
                    border: '1px solid rgba(255,255,255,0.2)',
                    transition: 'transform 0.3s ease',
                    '&:hover': { transform: 'translateY(-5px)' },
                  }}
                >
                  <CardContent sx={{ textAlign: 'center', color: 'white' }}>
                    <Celebration sx={{ fontSize: 40, mb: 1 }} />
                    <Typography variant="body2" fontWeight="medium">
                      Milestones
                    </Typography>
                    <Typography variant="caption" sx={{ opacity: 0.9 }}>
                      Mốc phát triển
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid size={{ xs: 6 }}>
                <Card
                  sx={{
                    bgcolor: 'rgba(255,255,255,0.15)',
                    backdropFilter: 'blur(10px)',
                    border: '1px solid rgba(255,255,255,0.2)',
                    transition: 'transform 0.3s ease',
                    '&:hover': { transform: 'translateY(-5px)' },
                  }}
                >
                  <CardContent sx={{ textAlign: 'center', color: 'white' }}>
                    <FavoriteRounded sx={{ fontSize: 40, mb: 1 }} />
                    <Typography variant="body2" fontWeight="medium">
                      Memories
                    </Typography>
                    <Typography variant="caption" sx={{ opacity: 0.9 }}>
                      Kỷ niệm vĩnh cửu
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </Grid>

          {/* Right Side - Login Form */}
          <Grid
            size={{ xs: 12, md: 6 }}
            sx={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              p: { xs: 2, sm: 4 },
              position: 'relative',
              zIndex: 1,
            }}
          >
            <Paper
              elevation={24}
              sx={{
                p: { xs: 3, sm: 5 },
                width: '100%',
                maxWidth: 450,
                borderRadius: 4,
                bgcolor: 'background.paper',
                boxShadow: '0 20px 60px rgba(0,0,0,0.3)',
                animation: 'slideIn 0.5s ease-out',
                '@keyframes slideIn': {
                  from: {
                    opacity: 0,
                    transform: 'translateX(30px)',
                  },
                  to: {
                    opacity: 1,
                    transform: 'translateX(0)',
                  },
                },
              }}
            >
              {/* Mobile Logo */}
              <Box sx={{ display: { xs: 'block', md: 'none' }, textAlign: 'center', mb: 3 }}>
                <ChildCare sx={{ fontSize: 60, color: 'primary.main', mb: 1 }} />
                <Typography variant="h5" fontWeight="bold" color="primary">
                  Kids Memories
                </Typography>
              </Box>

              <Box sx={{ textAlign: 'center', mb: 4 }}>
                <Typography variant="h4" component="h1" gutterBottom fontWeight="bold" sx={{ display: { xs: 'none', md: 'block' } }}>
                  Đăng nhập
                </Typography>
                <Typography variant="h5" component="h1" gutterBottom fontWeight="bold" sx={{ display: { xs: 'block', md: 'none' } }}>
                  Đăng nhập
                </Typography>
                <Typography variant="body1" color="text.secondary">
                  Chào mừng bạn quay trở lại! 👋
                </Typography>
              </Box>

              {error && (
                <Alert
                  severity="error"
                  sx={{
                    mb: 3,
                    borderRadius: 2,
                    animation: 'shake 0.5s ease',
                    '@keyframes shake': {
                      '0%, 100%': { transform: 'translateX(0)' },
                      '25%': { transform: 'translateX(-10px)' },
                      '75%': { transform: 'translateX(10px)' },
                    },
                  }}
                  onClose={clearError}
                >
                  {error}
                </Alert>
              )}

              <form onSubmit={handleSubmit}>
            <TextField
              fullWidth
              label="Email"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleChange}
              error={!!validationErrors.email}
              helperText={validationErrors.email}
              margin="normal"
              autoComplete="email"
              autoFocus
              disabled={isLoading}
            />

            <TextField
              fullWidth
              label="Password"
              name="password"
              type={showPassword ? 'text' : 'password'}
              value={formData.password}
              onChange={handleChange}
              error={!!validationErrors.password}
              helperText={validationErrors.password}
              margin="normal"
              autoComplete="current-password"
              disabled={isLoading}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={() => setShowPassword(!showPassword)}
                      edge="end"
                      disabled={isLoading}
                    >
                      {showPassword ? <VisibilityOff /> : <Visibility />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />

            <Button
              fullWidth
              type="submit"
              variant="contained"
              size="large"
              disabled={isLoading}
              startIcon={isLoading ? <CircularProgress size={20} /> : <LoginIcon />}
              sx={{ mt: 3, mb: 2, py: 1.5 }}
            >
              {isLoading ? 'Đang đăng nhập...' : 'Đăng nhập'}
            </Button>

            <Box sx={{ textAlign: 'center' }}>
              <Typography variant="body2" color="text.secondary">
                Chưa có tài khoản?{' '}
                <Link
                  component={NextLink}
                  href="/auth/register"
                  underline="hover"
                  sx={{ fontWeight: 'medium' }}
                >
                  Đăng ký ngay
                </Link>
              </Typography>
            </Box>
          </form>
        </Paper>
      </Box>
    </Container>
  );
}
